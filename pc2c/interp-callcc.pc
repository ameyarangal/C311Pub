(define-registers v* e* k* env* y* cls* a*)


(define-program-counter pc*)


#|expr|#


(define-union expr
  (const c)
  (var n)
  (if test conseq alt)
  (mult nexp1 nexp2)
  (sub1 nexp)
  (zero nexp)
  (letcc body)
  (callcc fun)
  (throw kexp vexp)
  (let exp body)              
  (lambda body)
  (app rator rand))


(define-label
  value-of-cps
  (union-case e* expr
   ((const c) (begin (set! k* k*) (set! v* c) (set! pc* apply-k)))
   ((mult x1 x2) (begin (set! k* (cont_mult-k-1 x2 env* k*)) (set! e* x1) (set! pc* value-of-cps)))
   ((sub1 x) (begin (set! k* (cont_sub1-k k*)) (set! e* x) (set! env* env*) (set! pc* value-of-cps)))
   ((zero x) (begin (set! k* (cont_zero-k k*)) (set! e* x) (set! pc* value-of-cps)))
   ((if test conseq alt)
    (begin (set! k* (cont_if-k conseq alt env* k*)) (set! e* test) (set! pc* value-of-cps)))
   ((letcc body) (begin (set! e* body) (set! env* (envr_extended env* k*)) (set! pc* value-of-cps)))
   ((callcc fun) (begin (set! k* (cont_callcc-k k*)) (set! e* fun) (set! pc* value-of-cps)))
   ((throw k-exp v-exp)
    (begin (set! k* (cont_throw-k-k v-exp env*)) (set! e* k-exp) (set! pc* value-of-cps)))
   ((let e body) (begin (set! k* (cont_let-k body env* k*)) (set! e* e) (set! pc* value-of-cps)))
   ((var n) (begin (set! k* k*) (set! y* n) (set! env* env*) (set! pc* apply-env)))
   ((lambda body) (begin (set! v* (clos_c body env*)) (set! pc* apply-k)))
   ((app rator rand)
    (begin (set! k* (cont_app-rator-k rand env* k*)) (set! e* rator) (set! pc* value-of-cps)))))
(define-union clos (c body env-cps))
(define-label
  apply-closure
  (union-case
   cls*
   clos
   ((c body env-cps)
    (begin (set! k* k*) (set! e* body) (set! env* (envr_extended env-cps a*)) (set! pc* value-of-cps)))))
(define-union envr (empty) (extended base val))
(define-label
  apply-env
  (union-case
   env*
   envr
   ((empty) 0)
   ((extended base val)
    (if (zero? y*)
        (begin (set! v* val) (set! pc* apply-k))
        (begin (set! k* k*) (set! y* (sub1 y*)) (set! env* base) (set! pc* apply-env))))))
(define-union cont
  (empty-k dismount)
  (mult-k-1 x2 env k)
  (mult-k-2 k x1)
  (sub1-k k)
  (zero-k k)
  (if-k thn els env k)
  (throw-v-k k-val)
  (throw-k-k v-exp env)
  (let-k body env k)
  (callcc-k k)
  (app-rand-k rator k)
  (app-rator-k rand env k))
(define-label apply-k
  (union-case k* cont
   ((empty-k dismount) (dismount-trampoline dismount))
   ((mult-k-1 x2 env k)
    (begin (set! k* (cont_mult-k-2 k v*)) (set! e* x2) (set! env* env) (set! pc* value-of-cps)))
   ((mult-k-2 k x1) (begin (set! k* k) (set! v* (* x1 v*)) (set! pc* apply-k)))
   ((sub1-k k) (begin (set! k* k) (set! v* (sub1 v*)) (set! pc* apply-k)))
   ((zero-k k) (begin (set! k* k) (set! v* (zero? v*)) (set! pc* apply-k)))
   ((if-k thn els env k)
    (if v*
        (begin (set! k* k) (set! e* thn) (set! env* env) (set! pc* value-of-cps))
        (begin (set! k* k) (set! e* els) (set! env* env) (set! pc* value-of-cps))))
   ((throw-v-k k-val) (begin (set! k* k-val) (set! v* v*) (set! pc* apply-k)))
   ((throw-k-k v-exp env)
    (begin (set! k* (cont_throw-v-k v*)) (set! e* v-exp) (set! env* env) (set! pc* value-of-cps)))
   ((let-k body env k)
    (begin (set! k* k) (set! e* body) (set! env* (envr_extended env v*)) (set! pc* value-of-cps)))
   ((callcc-k k)
    (begin
      (set! k* k)
      (set! a* k)
      (set! cls* v*)
      (set! pc* apply-closure)))
   ((app-rand-k rator k) (begin (set! k* k) (set! a* v*) (set! cls* rator) (set! pc* apply-closure)))
   ((app-rator-k rand env k)
    (begin (set! k* (cont_app-rand-k v* k)) (set! e* rand) (set! env* env) (set! pc* value-of-cps)))))
(define-label
  main
  (begin
    (set! e*
    (expr_callcc
	(expr_lambda
		(expr_mult (expr_app (expr_var 0) (expr_const 5)) (expr_const 5))))
          )
    (set! env* (envr_empty))
    (set! pc* value-of-cps)
    (mount-trampoline cont_empty-k k* pc*)
    (printf "Fact 5: ~s\n" v*)))